import torch
from layers import AttentionModule, TenorNetworkModule
from torch_geometric.nn import GCNConv


class SimGNN(torch.nn.Module):
    def __init__(self, args):
        super(SimGNN, self).__init__()
        self.args = args
        self.init_layers()

    def init_layers(self):
        self.gcn_1 = GCNConv(self.args.input_dim, self.args.channel_1)
        self.gcn_2 = GCNConv(self.args.channel_1, self.args.channel_2)
        self.gcn_3 = GCNConv(self.args.channel_2, self.args.channel_3)
        self.attention = AttentionModule(self.args)
        self.ntn = TenorNetworkModule(self.args)
        self.fully_connected_first = torch.nn.Linear(16, 16)
        self.scoring_layer = torch.nn.Linear(16, 1)

    def gcn_layers(self, edges, features):
        features = self.gcn_1(features, edges)
        features = torch.nn.functional.relu(features)
        features = torch.nn.functional.dropout(
            features, p=self.args.dropout, training=self.training
        )

        features = self.gcn_2(features, edges)
        features = torch.nn.functional.relu(features)
        features = torch.nn.functional.dropout(
            features, p=self.args.dropout, training=self.training
        )

        features = self.gcn_3(features, edges)
        return features

    def forward(self, data):
        edges_1 = data["edges_1"]
        edges_2 = data["edges_2"]
        features_1 = data["features_1"]
        features_2 = data["features_2"]

        features_1 = self.gcn_layers(edges_1, features_1)
        features_2 = self.gcn_layers(edges_2, features_2)

        features_1 = self.attention(features_1)
        features_2 = self.attention(features_2)

        scores = self.ntn(features_1, features_2)
        scores = torch.t(scores)

        scores = torch.nn.functional.relu(self.fully_connected_first(scores))
        score = torch.sigmoid(self.scoring_layer(scores))
        return score
